{"version":3,"sources":["../node_modules/@trust/webcrypto/src/algorithms sync","components/Counter.js","components/ListItem.js","components/List.js","components/Today.js","components/LogOutButton.js","components/LogInButton.js","netwerk/SolidCommunicator.js","model/BeerCounter.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Counter","props","animateButton","preventDefault","setState","className","setTimeout","onClick","state","this","React","Component","ListItem","beer","value","date","List","list","beerCounter","getOrderedDateList","map","key","String","getValueOnDate","padStart","Today","beers","LogOutButton","LogInButton","fileClient","require","$rdf","SOLID","Namespace","TERMS","RDF","BEERCOUNTER","PIM","BEERCOUNTERRECORD","sym","stringToDate","dateString","array","split","Date","UTC","SolidCommuncator","webid","applocation","appStore","subscribe","queryList","networking","query","getDateToday","amount","getBeerCount","push","startSendingFile","length","shift","blankNode","any","add","serialize","undefined","appStoreTTL","console","log","updateFile","checkSession","session","profile","webId","getUserCard","storeProfileCard","getPPILocation","ppiObject","getStorePublic","storagePublic","getApplicationLocation","ppi","store","applicationLocation","getAppStore","getDatesAndCountsFromStore","setCountsPerDate","graph","fetch","appTTL","parse","publicProfileIndex","storePublicProfileIndex","app","appQuery","createAppNodeForPublicTypeIndex","profileCardTTl","storePublicTypeIndex","publicTypeIndexTTL","blankNodes","each","Map","forEach","element","dd","getDate","mm","getMonth","yyyy","getFullYear","dateToString","set","publicTypeIndex","publicLocation","appLocation","newTTLpublicTypeindex","bnode","bnode1","bnode2","bnode3","newAppFile","BeerCounter","subscribers","countsPerDate","Array","from","sort","reverse","get","upDateSubScribers","has","dateToday","count","subscriber","update","filter","subscriberList","today","authClient","App","checkForLogin","unsubscribe","then","isLoggedIn","SolidCommunicator","build","aa","hasFetched","amountOfBeersToday","err","handleLogIn","popupLogin","popupUri","handleLogOut","logout","increaseBeers","increaeCountToday","button","appData","rendering","counter","href","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8966564e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 405;","import React from 'react';\r\n\r\nclass Counter extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            className : \"\"\r\n        }\r\n    }\r\n\r\n    animateButton = (e) => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        this.setState({\r\n            className : \"animate\"\r\n        })\r\n        \r\n        setTimeout(() => {\r\n            this.setState({\r\n                className : \"\"\r\n            })\r\n        },700);\r\n\r\n        this.props.onClick();\r\n      };\r\n\r\n    render(){\r\n        return (\r\n            <button className={\"bubbly-button \" + this.state.className} onClick = {this.animateButton}>One up the BEER</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\nclass ListItem extends React.Component{\r\n    render(){\r\n      let beer = this.props.value === 1 ? \"BEER\" : \"BEERS\";\r\n  \r\n      return (\r\n        <div className = \"record\">\r\n          <p className = \"topRecord\">\r\n            on {this.props.date} you drank\r\n          </p>\r\n          <p className = \"bottomRecord\">        \r\n            {this.props.value} {beer}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\n\r\nclass List extends React.Component{\r\n    render(){\r\n      let listDates = this.props.beerCounter.getOrderedDateList();\r\n      let list = listDates.map(date => <ListItem key = {date} date = {date} value = {String(this.props.beerCounter.getValueOnDate(date)).padStart(2, '0')}></ListItem>);\r\n      return (\r\n        <div className = \"listContainer\">\r\n          {list}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default List;","import React from 'react';\r\n\r\nclass Today extends React.Component{\r\n  render(){\r\n    let beer = this.props.beers === 1 ? \"BEER\" : \"BEERS\";\r\n\r\n    return (\r\n      <div className = \"today\">\r\n        <p>Today You Drank</p>\r\n        <p className = \"amount\"><span className = \"todayBeer\">{this.props.beers} {beer}</span></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Today;","import React from 'react';\r\n\r\nclass LogOutButton extends React.Component{\r\n    render(){\r\n      return(\r\n        <button onClick = {this.props.onClick} className = \"authButton\">Log Out</button>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default LogOutButton;","import React from 'react';\r\n\r\nclass LogInButton extends React.Component{\r\n    render(){\r\n      return(\r\n        <button onClick = {this.props.onClick} className = \"authButton\">Log In</button>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default LogInButton;","const fileClient = require('solid-file-client');\r\nconst $rdf = require('rdflib');\r\n\r\nconst SOLID = $rdf.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst TERMS = $rdf.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = $rdf.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst BEERCOUNTER = $rdf.Namespace(\"https://ozcanseker.inrupt.net/vocabulary#\");\r\nconst PIM = $rdf.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\n\r\nlet BEERCOUNTERRECORD = $rdf.sym(\"https://ozcanseker.inrupt.net/vocabulary#BeerCounterRecord\");\r\n\r\nclass SolidCommuncator{\r\n\r\n    /**\r\n     * \r\n     * @param {string} webid \r\n     * @param {string} applocation \r\n     * @param {store:rdflib} appStore \r\n     * @param {BeerCounter} beerCounter \r\n     */\r\n    constructor(webid, applocation, appStore, beerCounter){\r\n        this.webid = webid;\r\n        this.applocation = applocation;\r\n        this.appStore = appStore;\r\n\r\n        //subscribe to model\r\n        this.beerCounter = beerCounter;\r\n        this.beerCounter.subscribe(this);\r\n        \r\n        //for the networking\r\n        this.queryList = [];\r\n        this.networking = false;\r\n    }\r\n\r\n    update(){\r\n        let query = {\r\n            date : this.beerCounter.getDateToday(),\r\n            amount : this.beerCounter.getBeerCount()\r\n        }\r\n\r\n        this.queryList.push(query);\r\n\r\n        if(!this.networking){\r\n            this.startSendingFile();\r\n        }\r\n    }\r\n\r\n    async startSendingFile(){\r\n        this.networking = true;\r\n\r\n        while(this.queryList.length > 0){\r\n            let query = this.queryList.shift();\r\n            let date = query.date;\r\n            let blankNode = this.appStore.any(null, null, stringToDate(date));\r\n\r\n            if(blankNode){\r\n                let statment = this.appStore.any(blankNode, RDF('value'), null);   \r\n                statment.value = query.amount + \"\";     \r\n            }else{ \r\n                blankNode = $rdf.blankNode();\r\n                this.appStore.add(blankNode, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n                this.appStore.add(blankNode, TERMS('created'), stringToDate(date));\r\n                this.appStore.add(blankNode, RDF('value'), query.amount);\r\n            }\r\n        }\r\n\r\n        let appStoreTTL = await $rdf.serialize(undefined, this.appStore, 'text/turtle');\r\n        console.log(this.applocation);\r\n        await fileClient.updateFile(this.applocation, appStoreTTL);\r\n\r\n        if(this.queryList.length > 0){\r\n            this.startSendingFile();\r\n        }else{\r\n            this.networking = false;\r\n        }\r\n    }\r\n\r\n    static async build(beerCounter){\r\n        //get the session of the user logged in\r\n        const session = await fileClient.checkSession();\r\n        //make a named node of the session webid of the user\r\n        const profile = $rdf.sym(session.webId);\r\n\r\n        //get a store of the profile card of the logged in user\r\n        let storeProfileCard = await this.getUserCard(session);\r\n        \r\n        //store for the Public Profile Index\r\n        let ppiObject = await this.getPPILocation(profile, storeProfileCard);\r\n\r\n        //String that shows the location of the public storage of the pod\r\n        let storagePublic = await this.getStorePublic(profile, storeProfileCard);        \r\n\r\n        //Gets the location for the application or make a new enty in the Public profile index for the application.\r\n        //also makes an empty file at the application location\r\n        //string\r\n        let applicationLocation = await this.getApplicationLocation(ppiObject.ppi , ppiObject.store, storagePublic);\r\n\r\n        //get the application file in store form\r\n        let appStore = await this.getAppStore(applicationLocation);\r\n\r\n        //make a few example nodes to fill up the file\r\n        //let newAppFile = await this.addExampleNodes(appStore, applicationLocation);\r\n        //await fileClient.updateFile(applicationLocation.value, newAppFile);\r\n\r\n        //update the model BeerCounter with data from the file.\r\n        let map = this.getDatesAndCountsFromStore(appStore);\r\n        beerCounter.setCountsPerDate(map);\r\n\r\n        return new SolidCommuncator(session.webId, applicationLocation, appStore, beerCounter);\r\n    }  \r\n\r\n    static async getAppStore(applicationLocation){\r\n        let appStore = $rdf.graph();\r\n        let appTTL = await fileClient.fetch(applicationLocation);\r\n        await $rdf.parse(appTTL, appStore, applicationLocation , \"text/turtle\");\r\n        return appStore;\r\n    }\r\n\r\n    static async getApplicationLocation(publicProfileIndex, storePublicProfileIndex, storagePublic){\r\n        let app = $rdf.sym(publicProfileIndex.value + \"#BeerCounter\");\r\n        let appQuery = storePublicProfileIndex.any(app, SOLID(\"instance\"));\r\n\r\n        if(!appQuery){\r\n            //make a new entery in the ppi and make a file for you application\r\n            return await this.createAppNodeForPublicTypeIndex(storePublicProfileIndex, publicProfileIndex, storagePublic, app);\r\n        }else{\r\n            //get the applocation\r\n            return appQuery.value;\r\n        }\r\n    }\r\n\r\n    static async getUserCard(session){\r\n        const profileCardTTl = await fileClient.fetch(session.webId); \r\n        const storeProfileCard = $rdf.graph(); \r\n        $rdf.parse(profileCardTTl, storeProfileCard, session.webId, \"text/turtle\");\r\n        return storeProfileCard;\r\n    }\r\n    \r\n    static async getPPILocation(profile, storeProfileCard){\r\n        const publicProfileIndex = storeProfileCard.any(profile, SOLID(\"publicTypeIndex\"));\r\n        const storePublicTypeIndex = $rdf.graph();\r\n        const publicTypeIndexTTL = await fileClient.fetch(publicProfileIndex.value);\r\n        $rdf.parse(publicTypeIndexTTL, storePublicTypeIndex, publicProfileIndex.value, \"text/turtle\");\r\n        return {store : storePublicTypeIndex, ppi : publicProfileIndex};\r\n    }\r\n\r\n    static getStorePublic(profile, storeProfileCard){\r\n        let locationStorage = storeProfileCard.any(profile, PIM(\"storage\"));\r\n        return locationStorage.value + \"public\";\r\n    }\r\n\r\n    static getDatesAndCountsFromStore(store){\r\n        let blankNodes = store.each(null , null, BEERCOUNTER('BeerCounterRecord'));\r\n        let map = new Map();\r\n\r\n        blankNodes.forEach(element => {\r\n            let value = store.any(element, RDF('value'));\r\n            let date = store.any(element, TERMS('created'));\r\n            date = dateToString(new Date(date.value));\r\n\r\n            map.set(date, value.value);\r\n        });\r\n\r\n        return map;\r\n    }\r\n\r\n    static async createAppNodeForPublicTypeIndex(store, publicTypeIndex, publicLocation, app){\r\n        //TODO check if there is a file here otherwise make a new file\r\n\r\n        let appLocation = publicLocation + \"/beercounter.ttl\"\r\n        await fileClient.updateFile(appLocation, \"\");\r\n\r\n        appLocation = $rdf.sym(appLocation);\r\n        \r\n        store.add(publicTypeIndex, TERMS('references'), app);\r\n        store.add(app, RDF('type'), SOLID('TypeRegistration'));\r\n        store.add(app, SOLID('forClass'), BEERCOUNTERRECORD);\r\n        store.add(app, SOLID('instance'), appLocation);\r\n        \r\n        let newTTLpublicTypeindex = await $rdf.serialize(undefined, store, publicTypeIndex.value, 'text/turtle');\r\n\r\n        await fileClient.updateFile(publicTypeIndex.value, newTTLpublicTypeindex); \r\n\r\n        return appLocation.value;\r\n    }\r\n\r\n    static async addExampleNodes(appStore, applocation){\r\n        applocation = $rdf.sym(applocation);\r\n        let bnode = $rdf.blankNode();\r\n        let bnode1 = $rdf.blankNode();\r\n        let bnode2 = $rdf.blankNode();\r\n        let bnode3 = $rdf.blankNode();\r\n\r\n        appStore.add(applocation, TERMS('references'), bnode);\r\n        appStore.add(applocation, TERMS('references'), bnode1);\r\n        appStore.add(applocation, TERMS('references'), bnode2);\r\n        appStore.add(applocation, TERMS('references'), bnode3);\r\n\r\n        appStore.add(bnode, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n        appStore.add(bnode, RDF('value'), 4);        \r\n        appStore.add(bnode, TERMS('created'), stringToDate(\"17/09/2019\"));  \r\n\r\n        appStore.add(bnode1, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n        appStore.add(bnode1, RDF('value'), 5);        \r\n        appStore.add(bnode1, TERMS('created'), stringToDate(\"16/09/2019\"));  \r\n        \r\n        appStore.add(bnode2, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n        appStore.add(bnode2, RDF('value'), 16);        \r\n        appStore.add(bnode2, TERMS('created'), stringToDate(\"15/09/2019\"));  \r\n\r\n        appStore.add(bnode3, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n        appStore.add(bnode3, RDF('value'), 2);\r\n        appStore.add(bnode3, TERMS('created'), stringToDate(\"14/09/2019\"));  \r\n\r\n        // let query = appStore.each(undefined, undefined, BEERCOUNTER('BeerCounterRecord'));\r\n        // let query2 = appStore.each(query[0], undefined);\r\n\r\n        let newAppFile = await $rdf.serialize(undefined, appStore,'text/turtle');\r\n        return newAppFile;\r\n    }\r\n}\r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy;\r\n}\r\n\r\nfunction stringToDate(dateString){\r\n    let array = dateString.split('/');\r\n    let date = new Date(Date.UTC(array[2], array[1] - 1, array[0]));    \r\n    return date;\r\n}\r\n\r\nexport default SolidCommuncator;","class BeerCounter {\r\n    constructor(){\r\n        this.subscribers = []; \r\n        this.countsPerDate = new Map();\r\n    }\r\n\r\n    getOrderedDateList(){\r\n        let arr = Array.from(this.countsPerDate.keys()).sort().reverse();\r\n        return arr;\r\n    }\r\n\r\n    getValueOnDate(date){\r\n       return this.countsPerDate.get(date);\r\n    }\r\n\r\n    setCountsPerDate(map){\r\n        this.countsPerDate = map;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getBeerCount(){\r\n        if(this.countsPerDate.has(this.dateToday())){\r\n            return this.getValueOnDate(this.dateToday());\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getDateToday(){\r\n        return this.dateToday();\r\n    }\r\n\r\n    increaeCountToday(){\r\n        let date = this.dateToday();\r\n        let count;\r\n\r\n        if(this.countsPerDate.has(date)){\r\n            count = this.countsPerDate.get(date);\r\n        }else{\r\n            count = 0;\r\n        }\r\n\r\n        count++;\r\n\r\n        this.countsPerDate.set(date, count);\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    upDateSubScribers(){\r\n        this.subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this.subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber){\r\n        this.subscribers.filter(subscriberList  => {\r\n            return subscriberList === subscriber;\r\n        });\r\n    }\r\n\r\n    dateToday(){\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n        var yyyy = today.getFullYear();\r\n      \r\n        return dd + '/' + mm + '/' + yyyy;\r\n    }\r\n}\r\n\r\nexport default BeerCounter;","import React from 'react';\r\nimport './App.scss';\r\nimport Counter from './components/Counter';\r\nimport List from './components/List';\r\nimport Today from './components/Today';\r\nimport LogOutButton from './components/LogOutButton'\r\nimport LogInButton from './components/LogInButton'\r\n\r\nimport SolidCommunicator from './netwerk/SolidCommunicator';\r\nimport BeerCounter from './model/BeerCounter'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isLoggedIn : false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.checkForLogin();\r\n  }\r\n\r\n  checkForLogin = () => {\r\n    if(this.state.beerCounter){\r\n      this.state.beerCounter.unsubscribe();\r\n    }\r\n\r\n    fileClient.checkSession().then( session => {\r\n      let beerCounter = new BeerCounter();\r\n      beerCounter.subscribe(this);\r\n\r\n      if(session){\r\n        this.setState({\r\n          isLoggedIn : true,\r\n          beerCounter : beerCounter\r\n        });\r\n  \r\n        SolidCommunicator.build(beerCounter).then( aa => {\r\n          this.setState({\r\n            hasFetched: true,\r\n            amountOfBeersToday : this.state.beerCounter.getBeerCount(),\r\n            dateToday : this.state.beerCounter.getDateToday()\r\n          });\r\n        });\r\n      }else{\r\n        this.setState({\r\n          isLoggedIn : false\r\n        });\r\n      }\r\n    }, err =>  this.setState({\r\n      isLoggedIn : false\r\n    }));\r\n  }\r\n\r\n  update = () =>{\r\n\r\n    this.setState({\r\n      amountOfBeersToday : this.state.beerCounter.getBeerCount(),\r\n      dateToday : this.state.beerCounter.getDateToday()\r\n    });\r\n\r\n  }\r\n\r\n  handleLogIn = () => {\r\n    let popupUri = '/popup.html';\r\n    authClient.popupLogin({ popupUri }).then(() => {\r\n      this.checkForLogin();\r\n    })\r\n  }\r\n\r\n  handleLogOut = () => {\r\n    fileClient.logout()\r\n    .then(\r\n      this.setState({isLoggedIn : false})\r\n      );\r\n  }\r\n\r\n  increaseBeers = () => {\r\n    this.state.beerCounter.increaeCountToday();\r\n  }\r\n  \r\n  render(){\r\n    let button;\r\n    let appData;\r\n    let rendering;\r\n\r\n    if(this.state.isLoggedIn){\r\n      button = <LogOutButton onClick = {this.handleLogOut}></LogOutButton>\r\n    }else{\r\n      button = <LogInButton onClick = {this.handleLogIn}></LogInButton>\r\n    }\r\n\r\n    if(this.state.hasFetched){\r\n      let list = <List beerCounter = {this.state.beerCounter}></List>\r\n      let counter = <Counter onClick = {this.increaseBeers}></Counter>\r\n      let today = <Today date = {this.state.dateToday} beers = {this.state.amountOfBeersToday}></Today>\r\n    \r\n      appData = (<section>\r\n          {today}\r\n          {counter}\r\n          {list}\r\n      </section>)\r\n    }else{\r\n      rendering = (<section id = \"rendering\">\r\n        <h3>Fetching data</h3>\r\n        <div id = \"fetchinAnimation\"></div>\r\n      </section>)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1>Beer counter</h1>\r\n        </header>\r\n        <section id = \"authDiv\">\r\n          {button}\r\n        </section>\r\n          {rendering}\r\n          {appData}\r\n          <footer>\r\n            <span>\r\n              This application is powered by\r\n            </span>\r\n              <a href=\"https://meetflo.zendesk.com/hc/en-us/articles/230425728-Privacy-Policies\">\r\n              <img alt = \"Solid inrupt\" src={process.env.PUBLIC_URL + '/Knipsel.png'} /> \r\n            </a>\r\n          </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}